/*
  Copyright (C) 2002-2024 Michael S. D'Errico.  All Rights Reserved.

  This source code is the property of Michael S. D'Errico and is
  protected under international copyright laws.

  This program is free software: you can redistribute it and/or modify
  it under the terms of version 3 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.

  Options for Contacting the Author:

    email name:   mikestoolbox
    email domain: pobox.com
    X/Twitter:    @mikestoolbox
    mail:         Michael D'Errico
                  10161 Park Run Drive, Suite 150
                  Las Vegas, NV 89145
*/

//+---------------------------------------------------------------------------
//  File:       SocketAddress.class
//
//  Synopsis:   Class definitions for objects that represent socket addresses
//----------------------------------------------------------------------------

namespace mikestoolbox {

class SocketAddress
{
friend class Socket;

public:

    SocketAddress (const String& str_Address, uint16 u_Port);
    SocketAddress (const char* pz_Address, uint16 u_Port);
    SocketAddress (const String& str_Address);
    SocketAddress (const char* pz_Address);
    SocketAddress (const SocketAddress&);
    SocketAddress (const struct sockaddr* p_Address);
    SocketAddress ();

    bool            GetAddress      (String& str) const;
    String          GetAddress      () const;
    uint16          GetPort         () const;

    bool            SetAddress      (const String& str_Address);
    bool            SetAddress      (const char* pz_Address);
    bool            SetPort         (uint16 u_Port);

    bool            IsValid         () const;

    intsys          Family          () const;
    intsys          Length          () const;
    uintsys         Capacity        () const;

    SocketAddress&  operator=       (const SocketAddress&);
    SocketAddress&  operator=       (const String&);
    SocketAddress&  operator=       (const char*);

    bool operator== (const SocketAddress& addr) const;
    bool operator!= (const SocketAddress& addr) const;

    operator const struct sockaddr* () const;
    operator       struct sockaddr* ();

private:

    struct sockaddr_storage ss_Address_;
};

class IpAddressRange
{
public:

    IpAddressRange (const String& str_Address, uintsys u_NumBits);
    IpAddressRange (const char* pz_Address, uintsys u_NumBits);
    IpAddressRange (const String& str_RangeSpec);
    IpAddressRange (const char* pz_RangeSpec);
    IpAddressRange (const SocketAddress& addr, uintsys u_NumBits);
    IpAddressRange ();

    bool Contains (const SocketAddress& addr) const;

private:

    SocketAddress addr_;
    uintsys       u_NumBits_;
    uintsys       u_Bitmask_;
};

typedef List<IpAddressRange> IpRangeList;

} // namespace mikestoolbox

#ifdef PLATFORM_WINDOWS
extern "C"
{
    int inet_aton (const char* strptr, struct in_addr* addrptr);
    int inet_pton (int family, const char* strptr, void* addrptr);
    const char* inet_ntop (int family, const void* addrptr,
                           char* strptr, size_t len);
}
#endif

