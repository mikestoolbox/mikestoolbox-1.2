/*
  Copyright (C) 2002-2024 Michael S. D'Errico.  All Rights Reserved.

  This source code is the property of Michael S. D'Errico and is
  protected under international copyright laws.

  This program is free software: you can redistribute it and/or modify
  it under the terms of version 3 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.

  Options for Contacting the Author:

    email name:   mikestoolbox
    email domain: pobox.com
    X/Twitter:    @mikestoolbox
    mail:         Michael D'Errico
                  10161 Park Run Drive, Suite 150
                  Las Vegas, NV 89145
*/

//+---------------------------------------------------------------------------
//  File:       Shared.class
//
//  Synopsis:   Base classes that allow for sharing of complex resources
//----------------------------------------------------------------------------

namespace mikestoolbox {

const uintsys RESOURCE_MUTABLE       = 1; // resource is always writable even if references > 1
const uintsys RESOURCE_COPY_ON_WRITE = 2; // resource is copied before modifying if refs > 1
const uintsys RESOURCE_NEW_ON_WRITE  = 3; // new resource created before modifying if refs > 1

class AlwaysShared { };

//+---------------------------------------------------------------------------
//  Class:      SharedData
//
//  Synopsis:   A class that holds a resource that needs to be shared.  Derive
//              your own class and add data and methods as needed.
//----------------------------------------------------------------------------

class SharedData
{
friend class SharedResource;

public:

    virtual ~SharedData () = 0;

protected:

    SharedData ();
    SharedData (AlwaysShared);      // create NULL data

private:

    mutable RefCount refs_;
    bool             b_CountRefs_;

    uintsys IncrementRefs_ () const;
    uintsys DecrementRefs_ () const;

    SharedData (const SharedData& data);
    SharedData& operator= (const SharedData& data);
};

//+---------------------------------------------------------------------------
//  Class:      SharedResource
//
//  Synopsis:   A class that allows for sharing of a complex resource.  The
//              shared data is reference counted.
//----------------------------------------------------------------------------

class SharedResource
{
public:

    virtual ~SharedResource () = 0;

protected:

    SharedResource (const SharedResource& shared);
    SharedResource (int n_Type, SharedData* p_Data);

    bool                IsShared     () const;

    const SharedData*   ViewData     () const;
          SharedData*   ModifyData   ();

    void                NewData      (); // create new SharedData, refs=1
    void                ClearData    (); // create empty SharedData, refs might not equal 1

    void                Swap         (SharedResource& resource);

    SharedResource&     operator=    (const SharedResource& shared);

private:

    uintsys References_    () const;
    uintsys IncrementRefs_ () const;
    uintsys DecrementRefs_ () const;

    virtual SharedData* MakeCopyOfSharedData_ (const SharedData* p_OldData) const;
    virtual SharedData* MakeEmptySharedData_  () const;
    virtual SharedData* MakeNewSharedData_    () const;

    SharedData* p_Data_;
    int         n_Type_;

    SharedResource ();
};

} // namespace mikestoolbox

